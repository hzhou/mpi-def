include: c/mpi.def
# run: test_latency
run: osu_latency

page: test_latency, mpi_frame
    module: c
    exe: mpirun -l -np 2 out/test_latency
    SIZE: 8

    $call init_buf, $(SIZE)
    $call get_latency, $(SIZE), 1

page: osu_latency, mpi_frame
    module: c
    exe: mpirun -np 2 out/osu_latency
    MAX: 5000000
    # MAX: 100

    $call init_buf, $(MAX)
    $for int size=1; size<$(MAX); size*=2
        $if size < 8192
            tn_iter = 50000
        $else
            tn_iter = 1000
        $call get_latency, size, tn_iter

page: cuda_latency, mpi_frame
    module: c
    exe: MPIR_CVAR_ODD_EVEN_CLIQUES=1 mpirun -np 2 out/cuda_latency
    MAX: 5000000
    # MAX: 100

    $call init_cuda

    $for int size=1; size<$(MAX); size*=2
        $if size < 8192
            tn_iter = 1000
        $else
            tn_iter = 1000
        tn_iter = 1
        $call get_latency, size, tn_iter

    subcode: init_cuda
        $include cuda_runtime
        $uselib cudart
        $local void *s_buf
        cudaMalloc(&s_buf, $(MAX))

#---------------------------------------- 
macros:
    # noncontig: 1

#---------------------------------------- 
subcode: init_buf(size)
    $allocate($(size)) s_buf

subcode: get_latency(size, iters)
    $local tn_data

    $local t_start, t_end: double

    $(mset:tag1=100, tag2=101)
    $(if:noncontig)
        $local datatype: MPI_Datatype
        MPI_Type_vector($(noncontig), $(size), $(size)+4, MPI_CHAR, &datatype)
        MPI_Type_commit(&datatype)
        $(set:data=1, datatype)
    $(else)
        $(set:data=$(size), MPI_CHAR)

    &call with_p2p, 0, 1
        $(for:try in 0,1)
            t_start = get_wtime()
            $for i=0:$(iters)
                $call send_to, s_buf, $(data)
                $call send_back, s_buf, $(data)
            t_end = get_wtime()

            $(if:try=1 and is_p1)
                $my double tf_diff = t_end - t_start
                $if tf_diff < 0 
                    tf_diff += 16
                $print "  %10d - %f\n", $(size), tf_diff*1e6/(2.0*$(iters))
    $(if:noncontig)
        MPI_Type_free(&datatype)

fncode: get_wtime: double
    $include time
    $uselib POSIX
    $local struct timespec t
    clock_gettime(CLOCK_MONOTONIC, &t)
    return (double)(t.tv_sec & 0xf) + (double)t.tv_nsec *1e-9
