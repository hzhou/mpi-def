include: c/mpi.def

page: test_rma, mpi_frame
    module: c
    exe: mpiexec -n 4 out/test_rma

    $call hello

    $global int A[10], win
    $if mpi_id == 0
        MPI_Win_create(NULL, 0, sizeof(int), MPI_INFO_NULL, $(comm), &win)
        $my MPI_Win win2
        $(if:0)
            # won't complete as MPI_Win_create is a synchronous call
            MPI_Win_create(NULL, 0, sizeof(int), MPI_INFO_NULL, $(comm), &win2)
            $print "win 2 = %x", win2
    $else
        MPI_Win_create(A, sizeof(A), sizeof(int), MPI_INFO_NULL, $(comm), &win)
    $print "[$mpi_id] win = %x", win
    # --------------------------------------- 
    $(set:T=1, MPI_INT)
    $(if:0)
        $call use_win_fence
    $(elif:0)
        $call use_win_lock
    $(elif:1)
        $call use_win_sync
    # --------------------------------------- 
    $print "proc $mpi_id: %d %d %d", A[1], A[2], A[3]
    MPI_Win_free(&win)


subcode: use_win_fence
    MPI_Win_fence(0, win)
    $if mpi_id == 0
        $for i=1:4
            n = 201800 + i
            $(if:1)
                MPI_Put(&n, $(T), i, i, $(T), win)
            $(else)
                A[i] = n
    $if mpi_id == 0
        MPI_Win_fence(MPI_MODE_NOSTORE, win)
    $else
        MPI_Win_fence(0, win)

subcode: use_win_lock
    $if mpi_id == 0
        $for i=1:4
            # MPI_Win_lock(MPI_LOCK_SHARED, i, 0, win)
            MPI_Win_lock(MPI_LOCK_EXCLUSIVE, i, 0, win)
            n = 201800 + i
            MPI_Put(&n, $(T), i, i, $(T), win)
            # MPI_Win_flush(i, win)
            # MPI_Win_unlock implies MPI_Win_flush
            MPI_Win_unlock(i, win)
    MPI_Barrier($(comm))

subcode: use_win_sync
    $if mpi_id == 0
        $for i=1:4
            # MPI_Win_lock(MPI_LOCK_SHARED, i, 0, win)
            MPI_Win_lock(MPI_LOCK_EXCLUSIVE, i, 0, win)
            n = 201800 + i
            MPI_Put(&n, $(T), i, i, $(T), win)
            MPI_Win_sync(win)
            MPI_Win_unlock(i, win)
        # MPI_Win_unlock implies MPI_Win_flush
    MPI_Barrier($(comm))

# MPI_Win_allocate_shared
subcode: use_direct_load
    $if mpi_id == 0
        $for i=1:4
            A[i]=201800+i
        MPI_Win_sync(win)
    MPI_Barrier($(comm))

